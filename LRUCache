class LRUCache {
	class DLinkedNode {
	    int key;
	    int value;
	    DLinkedNode prev;
	    DLinkedNode next;
	    DLinedNode() {};
	    DLinkedNode(int key, int value) {
	        this.key = key;
	        this.value = value;
	    }
	}

	private Map<Integer, DLinkedNode> map = new HashMap<Integer, DLinkedNode>();

	private int size;
	private int capacity;
	private DLinkedNode head, tail;

	Public LRUCache(int capacity) {
	    this.size = 0;
	    this.capacity = capacity;
	    this.head = new DLinkedNode();
	    this.tail = new DLinkedNode();
	    head.next = tail;
	    tail.prev = head;
	}

	public int get(int key) {
	    DLinkedNode node = map.get(key);
	    if (node == null) {
	        return -1;
	    }
	    moveToHead(node);
	    return node.value;
	}
	
	public void put(int key, int value) {
	    DLinkedNode node = map.get(key);
	    if (node == null) {
	        DLinkedNode newNode = new DLinkedNode(key, value);
	        map.put(key, newNode);
	        addToHead(newNode);
	        size++;
	        if (size > capacity) {
	            DLinkedNode tail = removeTail();
	            map.remove(tail.key);
	            size--;
	        }
	    }
	    else {
	        node.value = value;
	        moveToHead(node);
	    }
	}

	private void addToHead(DLinkedNode node) {
	    head.next.prev = node;
	    node.prev = head;
	    node.next = head.next;
	    head.next = node;
	}

	private void removeNode(DLinkedNode node) {
        node.prev.next = node.prev;
        node.next.prev = node.next;
	}

	private void moveToHead(DLinkedNode node) {
	    removeNode(node);
	    addToHead(node);
	}

	private DLinkedNode removeTail() {
	    DLinkedNode node = tail.prev;
	    removeNode(node);
	    return node;
	}
}